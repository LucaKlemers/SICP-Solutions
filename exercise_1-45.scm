#lang scheme
(define (fast-expt-iter a b n)
  (cond ((= n 0)
         a)
        ((even? n)
         (fast-expt-iter a (* b b) (/ n 2)))
        (else
         (fast-expt-iter (* a b) b (- n 1)))))
(define tolerance 0.00001)
(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2))
       tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))
(define (average-damp f)
  (lambda (x) (/ (+ x (f x)) 2)))
(define (repeated f x)
  (lambda (n)
    (if (= x 1)
        (f n)
        (f ((repeated f (- x 1))n)))))

(define (root x n)
  (define (get-damps n a)
    (if (< n 8)
        a
        (get-damps (/ n 2) (+ a 1))))
  (define (damp y)
    ((average-damp (lambda (y) (/ x (expt y (- n 1))))) y))
  (fixed-point ((repeated average-damp (get-damps n 1)) damp) 1.0))
(root 1000 35)
;That was tough!