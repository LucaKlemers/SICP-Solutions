#lang scheme
(define (flatmap proc seq)
  (accumulate append '() (map proc seq)))
(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
    (accumulate op initial (cdr sequence)))))
(define (enumerate-interval low high)
  (if (> low high)
      '()
      (cons low (enumerate-interval (+ low 1) high))))

(define (queens board-size)
  (define empty-board '())
  (define (safe? k positions)
    (define (point-x n) (car n))
    (define (point-y n) (cdr n))
    (define (diagonal? p n)
      (= (abs (- (point-x n) (point-x p))) (abs (- (point-y n) (point-y p)))))
    (let ((pos (car positions)))
     (accumulate (lambda (a b) (and a b)) #t (map (lambda (n)
                (if (or (diagonal? pos n) (= (point-x pos) (point-x n)) (= (point-y pos) (point-y n)))
                    false
                    true)) (cdr positions)))))
  (define (adjoin-position row column rest)
    (cons (cons row column) rest))
  (define (queen-cols k)
    (if (= k 0)
        (list empty-board)
        (filter
         (lambda (positions) (safe? k positions))
         (flatmap
          (lambda (rest-of-queens)
            (map (lambda (new-row)
                   (adjoin-position
                    new-row k rest-of-queens))
                 (enumerate-interval 1 board-size)))
          (queen-cols (- k 1))))))
  (queen-cols board-size))
(queens 8)